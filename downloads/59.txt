Filename - Wikipedia Filename From Wikipedia, the free encyclopedia Jump to navigation Jump to search Text string used to uniquely identify a computer file Screenshot of a Windows command shell showing filenames in a directory Filename list, with long filenames containing comma and space characters as they appear in a software display. A filename or file name is a name used to uniquely identify a computer file stored in a file system. Different file systems impose different restrictions on filename lengths and the allowed characters within filenames. A filename may include one or more of these components: host (or server) – network device that contains the file device (or drive) – hardware device or drive directory (or path) – directory tree (e.g., /usr/bin, \TEMP, [USR.LIB.SRC], etc.) file – base name of the file type (format or extension) – indicates the content type of the file (e.g. .txt, .exe, .COM, etc.) version – revision or generation number of the file The components required to identify a file varies across operating systems, as does the syntax and format for a valid filename. Discussions of filenames are complicated by a lack of standardization of the term. Sometimes "filename" is used to mean the entire name, such as the Windows name c:\directory\myfile.txt. Sometimes, it will be used to refer to the components, so the filename in this case would be myfile.txt. Sometimes, it is a reference that excludes an extension, so the filename would be just myfile. Contents 1 History 1.1 Unicode migration 2 References: absolute vs relative 3 Number of names per file 4 Length restrictions 5 Filename extensions 6 Encoding interoperability 6.1 Encoding indication interoperability 6.2 Unicode interoperability 6.3 Perspectives 7 Uniqueness 8 Letter case preservation 9 Reserved characters and words 9.1 In Windows 10 Comparison of filename limitations 11 See also 12 References 13 External links History[edit] This section needs expansion. You can help by adding to it. (July 2012) The dot (period or full-stop) as a filename extension separator, as well as the limit to three-letter extensions, appeared in the 1970s. They may have come from 16-bit RAD50 character encoding limits.[citation needed] Traditionally, most operating system supported filenames with only uppercase alphanumeric characters, but as time progressed, the number of characters allowed increased. This led to compatibility problems when moving files between different file systems.[1] In 1985, RFC 959 officially defined a pathname to be the character string that must be entered into a file system by a user in order to identify a file.[2] Around 1995, VFAT, an extension to the MS-DOS FAT filesystem, was introduced in Windows 95 and Windows NT. It allowed mixed-case Unicode long filenames (LFNs), in addition to classic "8.3" names. Unicode migration[edit] This section needs expansion. You can help by adding to it. (July 2012) One issue was migration to Unicode. For this purpose, several software companies provided software for migrating filenames to the new Unicode encoding. Microsoft provided migration transparent for the user throughout the VFAT technology Apple provided "File Name Encoding Repair Utility v1.0".[3] The Linux community provided “convmv”.[4] Mac OS X 10.3 marked Apple's adoption of Unicode 3.2 character decomposition, superseding the Unicode 2.1 decomposition used previously. This change caused problems for developers writing software for Mac OS X.[5] References: absolute vs relative[edit] Main article: Path (computing) An absolute reference includes all directory levels. In some systems, a filename reference that does not include the complete directory path defaults to the current working directory. This is a relative reference. One advantage of using a relative reference in program configuration files or scripts is that different instances of the script or program can use different files. This makes an absolute or relative path composed of a sequence of filenames. Number of names per file[edit] Unix-like file systems allow a file to have more than one name; in traditional Unix-style file systems, the names are hard links to the file's inode or equivalent. Windows supports hard links on NTFS file systems, and provides the command fsutil in Windows XP, and mklink in later versions, for creating them.[6][7] Hard links are different from Windows shortcuts, classic Mac OS/macOS aliases, or symbolic links. The introduction of LFNs with VFAT allowed filename aliases. For example, longfi~1.??? with a maximum of eight plus three characters was a filename alias of "long file name.???" as a way to conform to 8.3 limitations for older programs. This property was used by the move command algorithm that first creates a second filename and then only removes the first filename. Other filesystems, by design, provide only one filename per file, which guarantees that alteration of one filename's file does not alter the other filename's file. Length restrictions[edit] Some filesystems restrict the length of filenames. In some cases, these lengths apply to the entire file name, as in 44 characters on IBM S/370.[8] In other cases, the length limits may apply to particular portions of the filename, such as the name of a file in a directory, or a directory name. For example, 9 (e.g., 8-bit FAT in Standalone Disk BASIC), 11 (e.g. FAT12, FAT16, FAT32 in DOS), 14 (e.g. early Unix), 21 (Human68K), 31, 30 (e.g. Apple DOS 3.2 and 3.3), 15 (e.g. Apple ProDOS), 44 (e.g. IBM S/370),[8] or 255 (e.g. early Berkeley Unix) characters or bytes. Length limits often result from assigning fixed space in a filesystem to storing components of names, so increasing limits often requires an incompatible change, as well as reserving more space. A particular issue with filesystems that store information in nested directories is that it may be possible to create a file with a complete pathname that exceeds implementation limits, since length checking may apply only to individual parts of the name rather than the entire name. Many Windows applications are limited to a MAX_PATH value of 260, but Windows file names can easily exceed this limit [1]. Filename extensions[edit] Many file systems, including FAT, NTFS, and VMS systems, allow a filename extension that consists of one or more characters following the last period in the filename, dividing the filename into two parts: a base name or stem and an extension or suffix used by some applications to indicate the file type. Multiple output files created by an application use the same basename and various extensions. For example, a compiler might use the extension FOR for source input file (for Fortran code), OBJ for the object output and LST for the listing. Although there are some common extensions, they are arbitrary and a different application might use REL and RPT. On filesystems that do not segregate the extension, files will often have a longer extension such as html. Encoding interoperability[edit] There is no general encoding standard for filenames. Because file names have to be exchanged between software environments (think network file transfer, file system storage, backup and file synchronization software, configuration management, data compression and archiving, etc.), it is very important not to lose file name information between applications. This led to wide adoption of Unicode as a standard for encoding file names, although legacy software might be non-Unicode-aware. Encoding indication interoperability[edit] This section may need to be rewritten to comply with Wikipedia's quality standards. You can help. The talk page may contain suggestions. (September 2012) Traditionally, filenames allowed any character in their filenames as long as they were file system safe.[1] Although this permitted the use of any encoding, and thus allowed the representation of any local text on any local system, it caused many interoperability issues. A filename could be stored using different byte strings in distinct systems within a single country, such as if one used Japanese Shift JIS encoding and another Japanese EUC encoding. Conversion was not possible as most systems did not expose a description of the encoding used for a filename as part of the extended file information. This forced costly filename encoding guessing with each file access.[1] A solution was to adopt Unicode as the encoding for filenames. In the classic Mac OS, however, encoding of the filename was stored with the filename attributes.[1] Unicode interoperability[edit] The Unicode standard solves the encoding determination issue. Nonetheless, some limited interoperability issues remain, such as normalization (equivalence), or the Unicode version in use. For instance, UDF is limited to Unicode 2.0; macOS's HFS+ file system applies NFD Unicode normalization and is optionally case-sensitive (case-insensitive by default.) Filename maximum length is not standard and might depend on the code unit size. Although it is a serious issue, in most cases this is a limited one.[1] On Linux, this means the filename is not enough to open a file: additionally, the exact byte representation of the filename on the storage device is needed. This can be solved at the application level, with some tricky normalization calls.[9] The issue of Unicode equivalence is known as "normalized-name collision". A solution is the Non-normalizing Unicode Composition Awareness used in the Subversion and Apache technical communities.[10] This solution does not normalize paths in the repository. Paths are only normalized for the purpose of comparisons. Nonetheless, some communities have patented this strategy, forbidding its use by other communities.[clarification needed] Perspectives[edit] To limit interoperability issues, some ideas described by Sun are to: use one Unicode encoding (such as UTF-8) do transparent code conversions on filenames store no normalized filenames check for canonical equivalence among filenames, to avoid two canonically equivalent filenames in the same directory.[1] Those considerations create a limitation not allowing a switch to a future encoding different from UTF-8. Uniqueness[edit] Within a single directory, filenames must be unique. Since the filename syntax also applies for directories, it is not possible to create a file and directory entries with the same name in a single directory. Multiple files in different directories may have the same name. Uniqueness approach may differ both on the case sensitivity and on the Unicode normalization form such as NFC, NFD. This means two separate files might be created with the same text filename and a different byte implementation of the filename, such as L"\x00C0.txt" (UTF-16, NFC) (Latin capital A with grave) and L"\x0041\x0300.txt" (UTF-16, NFD) (Latin capital A, grave combining).[11] Letter case preservation[edit] Some filesystems, such as FAT, store filenames as upper-case regardless of the letter case used to create them. For example, a file created with the name "MyName.Txt" or "myname.txt" would be stored with the filename "MYNAME.TXT". Any variation of upper and lower case can be used to refer to the same file. These kinds of file systems are called case-insensitive and are not case-preserving. Some filesystems prohibit the use of lower case letters in filenames altogether. Some file systems store filenames in the form that they were originally created; these are referred to as case-retentive or case-preserving. Such a file system can be case-sensitive or case-insensitive. If case-sensitive, then "MyName.Txt" and "myname.txt" may refer to two different files in the same directory, and each file must be referenced by the exact capitalization by which it is named. On a case-insensitive, case-preserving file system, on the other hand, only one of "MyName.Txt", "myname.txt" and "Myname.TXT" can be the name of a file in a given directory at a given time, and a file with one of these names can be referenced by any capitalization of the name. From its original inception, Unix and its derivative systems were case-preserving. However, not all Unix-like file systems are case-sensitive; by default, HFS+ in macOS is case-insensitive, and SMB servers usually provide case-insensitive behavior (even when the underlying file system is case-sensitive, e.g. Samba on most Unix-like systems), and SMB client file systems provide case-insensitive behavior. File system case sensitivity is a considerable challenge for software such as Samba and Wine, which must interoperate efficiently with both systems that treat uppercase and lowercase files as different and with systems that treat them the same.[12] Reserved characters and words[edit] "Reserved characters" redirects here. For characters that cannot be used in page titles on Wikipedia, see Wikipedia:Naming conventions (technical restrictions) § Forbidden characters. File systems have not always provided the same character set for composing a filename. Before Unicode became a de facto standard, file systems mostly used a locale-dependent character set. By contrast, some new systems permit a filename to be composed of almost any character of the Unicode repertoire, and even some non-Unicode byte sequences. Limitations may be imposed by the file system, operating system, application, or requirements for interoperability with other systems. Many file system utilities prohibit control characters from appearing in filenames. In Unix-like file systems, the null character[13] and the path separator / are prohibited. In Windows[edit] File system utilities and naming conventions on Windows prohibit particular characters from appearing in filenames:[14] Character Name Reason for prohibition / slash Used as a path name component separator in Unix-like, Windows, and Amiga systems. (For as long as the SwitChar setting is set to '/ ', the DOS COMMAND.COM shell would consume it as a switch character, but DOS and Windows themselves always accept it as a separator on API level.) The big solidus ⧸ (Unicode code point U+29F8) is permitted in Windows filenames. \ backslash Used as the default path name component separator in DOS, OS/2 and Windows (even if the SwitChar is set to '-'; allowed in Unix filenames, see Note 1). The big reverse solidus ⧹ (U+29F9) is permitted in Windows filenames. ? question mark Used as a wildcard in Unix, Windows and AmigaOS; marks a single character. Allowed in Unix filenames, see Note 1. The glottal stop ʔ (U+0294), the interrobang ‽ (U+203D), the inverted question mark ¿ (U+00BF) and the double question mark ⁇ (U+2047) are allowed in all filenames. % percent Used as a wildcard in RT-11; marks a single character. Not special on Windows. * asterisk or star Used as a wildcard in Unix, DOS, RT-11, VMS and Windows. Marks any sequence of characters (Unix, Windows, DOS) or any sequence of characters in either the basename or extension (thus "*.*" in DOS means "all files". Allowed in Unix filenames, see Note 1. See Star (glyph) for many asterisk-like characters allowed in filenames. : colon Used to determine the mount point / drive on Windows; used to determine the virtual device or physical device such as a drive on AmigaOS, RT-11 and VMS; used as a pathname separator in classic Mac OS. Doubled after a name on VMS, indicates the DECnet nodename (equivalent to a NetBIOS (Windows networking) hostname preceded by "\\".). Colon is also used in Windows to separate an alternative data stream from the main file. The letter colon ꞉ (U+A789) and the ratio symbol ∶ (U+2236) are permitted in Windows filenames. In the Segoe UI font, used in Windows Explorer, the glyphs for the colon and the letter colon are identical. | vertical bar or pipe Designates software pipelining in Unix, DOS and Windows; allowed in Unix filenames, see Note 1. The dental click ǀ (U+01C0) is permitted in Windows filenames. " straight double quote The single quotes ' (U+0027) and ’ (U+2019) and curved double quotes “ (U+201C) and ” (U+201D) are permitted anywhere in filenames. See Note 1. < less than Used to redirect input, allowed in Unix filenames, see Note 1. > greater than Used to redirect output, allowed in Unix filenames, see Note 1. . period or dot Folder names cannot end with a period in Windows, though the name can end with a period followed by a whitespace character such as a non-breaking space. Elsewhere, the period is allowed, but the last occurrence will be interpreted to be the extension separator in VMS, DOS, and Windows. In other OSes, usually considered as part of the filename, and more than one period (full stop) may be allowed. In Unix, a leading period means the file or folder is normally hidden. , comma Allowed, but treated as separator by the command line interpreters COMMAND.COM and CMD.EXE on DOS and Windows. ; semicolon Allowed, but treated as separator by the command line interpreters COMMAND.COM and CMD.EXE on DOS and Windows. = equals sign Allowed, but treated as separator by the command line interpreters COMMAND.COM and CMD.EXE on DOS and Windows. space Allowed, but the space is also used as a parameter separator in command line applications. This can be solved by quoting the entire filename. Note 1: While they are allowed in Unix file and folder names, most Unix shells require specific characters such as spaces, <, >, |, \, and sometimes :, (, ), &, ;, #, as well as wildcards such as ? and *, to be quoted or escaped: five\ and\ six\<seven (example of escaping) 'five and six<seven' or "five and six<seven" (examples of quoting) The character å (0xE5) was not allowed as the first letter in a filename under 86-DOS and MS-DOS/PC DOS 1.x-2.x, but can be used in later versions. In Windows utilities, the space and the period are not allowed as the final character of a filename.[15] The period is allowed as the first character, but some Windows applications, such as Windows Explorer, forbid creating or renaming such files (despite this convention being used in Unix-like systems to describe hidden files and directories). Workarounds include appending a dot when renaming the file (that is then automatically removed afterwards), using alternative file managers, creating the file using the command line, or saving a file with the desired filename from within an application.[16] Some file systems on a given operating system (especially file systems originally implemented on other operating systems), and particular applications on that operating system, may apply further restrictions and interpretations. See comparison of file systems for more details on restrictions. In Unix-like systems, DOS, and Windows, the filenames "." and ".." have special meanings (current and parent directory respectively). Windows 95/98/ME also uses names like "...", "...." and so on to denote grandparent or great-grandparent directories.[17] All Windows versions forbid creation of filenames that consist of only dots, although names consist of three dots ("...") or more are legal in Unix. In addition, in Windows and DOS utilities, some words are also reserved and cannot be used as filenames.[16] For example, DOS device files:[18] CON, PRN, AUX, CLOCK$, NUL
COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9 [19]
LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, LPT9 [19]
LST (only in 86-DOS and DOS 1.xx)
KEYBD$, SCREEN$ (only in multitasking MS-DOS 4.0)
$IDLE$ (only in Concurrent DOS 386, Multiuser DOS and DR DOS 5.0 and higher)
CONFIG$ (only in MS-DOS 7.0-8.0)
 Systems that have these restrictions cause incompatibilities with some other filesystems. For example, Windows will fail to handle, or raise error reports for, these legal UNIX filenames: aux.c,[20] q"uote"s.txt, or NUL.txt. NTFS filenames that are used internally include: $Mft, $MftMirr, $LogFile, $Volume, $AttrDef, $Bitmap, $Boot, $BadClus, $Secure,
$Upcase, $Extend, $Quota, $ObjId and $Reparse
 Comparison of filename limitations[edit] Main article: Comparison of file systems System Case sensitive Case preserving Allowed character set Reserved characters Reserved words Maximum length (characters) Comments 8-bit FAT ? ? 7-bit ASCII (but stored as bytes) first character not allowed to be 0x00 or 0xFF 9 Maximum 9 character base name limit for sequential files (without extension), or maximum 6 and 3 character extension for binary files; see 6.3 filename FAT12, FAT16, FAT32 No No any SBCS/DBCS OEM codepage 0x00-0x1F 0x7F " * / : < > ? \ | + , . ; = [ ] (in some environments also: ! @; DOS 1/2 did not allow 0xE5 as first character) Device names including: $IDLE$ AUX COM1…COM4 CON CONFIG$ CLOCK$ KEYBD$ LPT1…LPT4 LST NUL PRN SCREEN$ (depending on AVAILDEV status everywhere or only in virtual \DEV\ directory) 11 Maximum 8 character base name limit and 3 character extension; see 8.3 filename VFAT No Yes Unicode, using UCS-2 encoding 0x00-0x1F 0x7F " * / : < > ? \ | 255 exFAT No Yes Unicode, using UTF-16 encoding 0x00-0x1F 0x7F " * / : < > ? \ | 255 NTFS Optional Yes Unicode, using UTF-16 encoding 0x00-0x1F 0x7F " * / : < > ? \ | Only in root directory: $AttrDef $BadClus $Bitmap $Boot $LogFile $MFT $MFTMirr pagefile.sys $Secure $UpCase $Volume $Extend $Extend\$ObjId $Extend\$Quota $Extend\$Reparse ($Extend is a directory) 255 Paths can be up to 32,000 characters. Forbids the use of characters in range 1-31 (0x01-0x1F) and characters " * / : < > ? \ | unless the name is flagged as being in the Posix namespace. NTFS allows each path component (directory or filename) to be 255 characters long[dubious – discuss]. Windows forbids the use of the MS-DOS device names AUX, CLOCK$, COM1, …, COM9, CON, LPT1, …, LPT9, NUL and PRN, as well as these names with any extension (for example, AUX.txt), except when using Long UNC paths (ex. \\.\C:\nul.txt or \\?\D:\aux\con). (CLOCK$ may be used, if an extension is provided.) The Win32 API strips trailing period (full-stop), and leading and trailing space characters from filenames, except when UNC paths are used. These restrictions only apply to Windows; in Linux distributions that support NTFS, filenames are written using NTFS's Posix namespace, which allows any Unicode character except / and NUL. OS/2 HPFS No Yes any 8-bit set |\?*<":>/ 254 Mac OS HFS No Yes any 8-bit set : 255 old versions of Finder are limited to 31 characters Mac OS HFS+ Optional Yes Unicode, using UTF-16 encoding : on disk, in classic Mac OS, and at the Carbon layer in macOS; / at the Unix layer in macOS 255 Mac OS 8.1 - macOS most UNIX file systems Yes Yes any 8-bit set / null 255 a leading . indicates that ls and file managers will not show the file by default z/OS classic MVS filesystem (datasets) No No EBCDIC code pages other than $ # @ - x'C0' 44 first character must be alphabetic or national ($, #, @) "Qualified" contains . after every 8 characters or fewer.[21] Partitioned data sets (PDS or PDSE) are divided into members with names of up to 8 characters; the member name is placed in parenthesises after the name of the PDS, e.g. PAYROLL.DEV.CBL(PROG001) CMS file system No No EBCDIC code pages 8 + 8 Single-level directory structure with disk letters (A–Z). Maximum of 8 character file name with maximum 8 character file type, separated by whitespace. For example, a TEXT file called MEMO on disk A would be accessed as "MEMO TEXT A". (Later versions of VM introduced hierarchical filesystem structures, SFS and BFS, but the original flat directory "minidisk" structure is still widely used.) early UNIX (AT&T Corporation) Yes Yes any 8-bit set / 14 a leading . indicates a "hidden" file POSIX "Fully portable filenames"[22] Yes Yes A–Z a–z 0–9 . _ - / null 14 hyphen must not be first character ISO 9660 No ? A–Z 0–9 _ . "close to 180"(Level 2) or 200(Level 3) Used on CDs; 8 directory levels max (for Level 1, not level 2,3) Amiga OFS No Yes any 8-bit set : / null 30 Original File System 1985 Amiga FFS No Yes any 8-bit set : / null 30 Fast File System 1988 Amiga PFS No Yes any 8-bit set : / null 107 Professional File System 1993 Amiga SFS No Yes any 8-bit set : / null 107 Smart File System 1998 Amiga FFS2 No Yes any 8-bit set : / null 107 Fast File System 2 2002 BeOS BFS Yes Yes Unicode, using UTF-8 encoding / 255 DEC PDP-11 RT-11 No No RADIX-50 6 + 3 Flat filesystem with no subdirs. A full "file specification" includes device, filename and extension (file type) in the format: dev:filnam.ext. DEC VAX VMS No From v7.2 A–Z 0–9 $ - _ 32 per component; earlier 9 per component; latterly, 255 for a filename and 32 for an extension. a full "file specification" includes nodename, diskname, directory/ies, filename, extension and version in the format: OURNODE::MYDISK:[THISDIR.THATDIR]FILENAME.EXTENSION;2 Directories can only go 8 levels deep. Commodore DOS Yes Yes any 8-bit set :, = $ 16 length depends on the drive, usually 16 HP 250 Yes Yes any 8-bit set SPACE ", : NULL CHR$(255) 6 Disks and tape drives are addressed either using a label (up to 8 characters) or a unit specification. The HP 250 file system does not use directories, nor does it use extensions to indicate file type. Instead the type is an attribute (e.g. DATA, PROG, BKUP or SYST for data files, program files, backups and the OS itself).[23] See also[edit] File system Fully qualified file name Long filename Path (computing) Slug (Web publishing) Symbolic link Uniform Resource Identifier (URI) Uniform Resource Locator (URL) and Internationalized resource identifier References[edit] ^ a b c d e f David Robinson; Ienup Sung; Nicolas Williams (March 2006). "Solaris presentations: File Systems, Unicode, and Normalization" (PDF). San Francisco: Sun.com. Archived from the original (PDF) on July 4, 2012. ^ RFC 959 IETF.org RFC 959, File Transfer Protocol (FTP) ^ "File Name Encoding Repair Utility v1.0". Support.apple.com. June 1, 2006. Retrieved October 2, 2018. ^ "convmv - converts filenames from one encoding to another". J3e.de. Retrieved September 17, 2013. ^ "Re: git on MacOSX and files with decomposed utf-8 file names". KernelTrap. May 7, 2010. Archived from the original on March 15, 2011. Retrieved July 5, 2010. ^ "Fsutil command description page". Microsoft.com. Retrieved September 15, 2013. ^ "NTFS Hard Links, Directory Junctions, and Windows Shortcuts". Flex hex. Inv Softworks. Retrieved March 12, 2011. ^ a b "ddname support with FTP, z/OS V1R11.0 Communications Server IP User's Guide and Commands z/OS V1R10.0-V1R11.0 SC31-8780-09". IBM.com. ^ "Filenames with accents". Ned Batchelder. Retrieved September 17, 2013. ^ "NonNormalizingUnicodeCompositionAwareness - Subversion Wiki". Wiki.apache.org. January 21, 2013. Retrieved September 17, 2013. ^ "Cross platform filepath naming conventions - General Programming". GameDev.net. Retrieved September 17, 2013. ^ "CaseInsensitiveFilenames - The Official Wine Wiki". Wiki.winehq.org. November 8, 2009. Archived from the original on August 18, 2010. Retrieved August 20, 2010. ^ "The Open Group Base Specifications Issue 6". IEEE Std 1003.1-2001. The Open Group. 2001. ^ "Naming Files, Paths, and Namespaces (Windows)". Msdn.microsoft.com. August 26, 2013. Retrieved September 17, 2013. ^ "Windows Naming Conventions". MSDN, Microsoft.com. See last bulleted item. ^ a b Naming a file msdn.microsoft.com (MSDN), filename restrictions on Windows ^ Microsoft Windows 95 README for Tips and Tricks, Microsoft, retrieved August 27, 2015 ^ MS-DOS Device Driver Names Cannot be Used as File Names., Microsoft ^ a b Naming Files, Paths, and Namespaces, Microsoft ^ Ritter, Gunnar (January 30, 2007). "The tale of "aux.c"". Heirloom Project. ^ "Subparameter Definition, z/OS V1R11.0 MVS JCL Reference". IBM.com. Retrieved September 17, 2013. ^ Lewine, Donald. POSIX Programmer's Guide: Writing Portable UNIX Programs 1991 O'Reilly & Associates, Inc. Sebastopol, CA pp63-64 ^ Hewlett-Packard Company Roseville, CA HP 250 Syntax Reference Rev 1/84 Manual Part no 45260-90063 External links[edit] Look up filename or filenames in Wiktionary, the free dictionary. Data Formats Filename at Curlie File Extension Library FILExt WikiExt - File Extensions Encyclopedia Naming Files, Paths, and Namespaces (MSDN) 2009 POSIX portable filename character set Standard ECMA-208, December 1994, System-Independent Data Format Best Practices for File Naming, USA: Stanford University Libraries, Data Management Services v t e Computer files Types Binary file / text file File format List of file formats File signatures Magic number Metafile Sidecar file Sparse file Swap file System file Temporary file Zero-byte file Properties Filename 8.3 filename Long filename Filename mangling Filename extension List of filename extensions File attribute Extended file attributes File size Hidden file / Hidden directory Organisation Directory/folder NTFS links Temporary folder Directory structure File sequence File system Filesystem Hierarchy Standard Path Operations Open Close Read Write Linking Alias File descriptor Hard link Shadow Shortcut Symbolic link Management File comparison Data compression File manager Comparison of file managers File system permissions File transfer File sharing File verification Retrieved from "https://en.wikipedia.org/w/index.php?title=Filename&oldid=1007123062" Categories: Filenames Records management Hidden categories: Articles with short description Short description matches Wikidata Use mdy dates from October 2017 Articles to be expanded from July 2012 All articles to be expanded Articles using small message boxes All articles with unsourced statements Articles with unsourced statements from March 2020 Wikipedia articles needing rewrite from September 2012 All articles needing rewrite Wikipedia articles needing clarification from February 2013 All accuracy disputes Articles with disputed statements from October 2012 Articles with Curlie links Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Languages العربية Azərbaycanca Čeština Dansk Deutsch Español Esperanto فارسی 한국어 Bahasa Indonesia Íslenska 日本語 Norsk bokmål Олык марий Русский Svenska Тоҷикӣ Українська Tiếng Việt 中文 Edit links This page was last edited on 16 February 2021, at 15:49 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement
