Software - Wikipedia Software From Wikipedia, the free encyclopedia Jump to navigation Jump to search For other uses, see Software (disambiguation). "Networked" redirects here. For the 2012 book, see Networked: The New Social Operating System. Non-tangible executable component of a computer A diagram showing how the user interacts with application software on a typical desktop computer. The application software layer interfaces with the operating system, which in turn communicates with the hardware. The arrows indicate information flow. Software is a collection of instructions and data that tell the computer how to work. This is in contrast to physical hardware, from which the system is built and actually performs the work. In computer science and software engineering, computer software is all information processed by computer systems, including programs and data. Computer software includes computer programs, libraries and related non-executable data, such as online documentation or digital media. Computer hardware and software require each other and neither can be realistically used on its own. At the lowest programming level,[clarification needed] executable code consists of machine language instructions supported by an individual processor—typically a central processing unit (CPU) or a graphics processing unit (GPU). A machine language consists of groups of binary values signifying processor instructions that change the state of the computer from its preceding state. For example, an instruction may change the value stored in a particular storage location in the computer—an effect that is not directly observable to the user. An instruction may also invoke one of many input or output operations, for example displaying some text on a computer screen; causing state changes which should be visible to the user. The processor executes the instructions in the order they are provided, unless it is instructed to "jump" to a different instruction, or is interrupted by the operating system. As of 2015[update], most personal computers, smartphone devices and servers have processors with multiple execution units or multiple processors performing computation together, and computing has become a much more concurrent activity than in the past. The majority of software is written in high-level programming languages. They are easier and more efficient for programmers because they are closer to natural languages than machine languages.[1] High-level languages are translated into machine language using a compiler or an interpreter or a combination of the two. Software may also be written in a low-level assembly language, which has strong correspondence to the computer's machine language instructions and is translated into machine language using an assembler. Contents 1 History 2 Types 2.1 Purpose, or domain of use 2.2 Nature or domain of execution 2.3 Programming ru.itis.search.tools 3 Topics 3.1 Architecture 3.2 Execution 3.3 Quality and reliability 3.4 License 3.5 Patents 4 Design and implementation 5 Industry and organizations 6 See also 7 References 7.1 Sources 8 External links History Main article: History of software An outline (algorithm) for what would have been the first piece of software was written by Ada Lovelace in the 19th century, for the planned Analytical Engine.[2] She created proofs to show how the engine would calculate Bernoulli Numbers.[2] Because of the proofs and the algorithm, she is considered the first computer programmer.[3][4] The first theory about software—prior to the creation of computers as we know them today—was proposed by Alan Turing in his 1935 essay On Computable Numbers, with an Application to the Entscheidungsproblem (decision problem). This eventually led to the creation of the academic fields of computer science and software engineering; Both fields study software and its creation. Computer science is the theoretical study of computer and software (Turing's essay is an example of computer science), whereas software engineering is the application of engineering and development of software. However, prior to 1946, software was not yet the programs stored in the memory of stored-program digital computers, as we now understand it. The first electronic computing devices were instead rewired in order to "reprogram" them. In 2000, Fred Shapiro, a librarian at the Yale Law School, published a letter revealing that John Wilder Tukey's 1958 paper "The Teaching of Concrete Mathematics"[5][6] contained the earliest known usage of the term "software" found in a search of JSTOR's electronic archives, predating the OED's citation by two years.[7] This led many to credit Tukey with coining the term, particularly in obituaries published that same year,[8] although Tukey never claimed credit for any such coinage. In 1995, Paul Niquette claimed he had originally coined the term in October 1953, although he could not find any documents supporting his claim.[9] The earliest known publication of the term "software" in an engineering context was in August 1953 by Richard R. Carhart, in a Rand Corporation Research Memorandum.[10] Types See also: Software categories Blender Game Engine, a free software program. On virtually all computer platforms, software can be grouped into a few broad categories. Purpose, or domain of use series on E-commerce Online goods and ru.itis.search.services Digital distribution E-books Software Streaming media Retail ru.itis.search.services Banking DVD-by-mail Flower delivery Food ordering Grocery Pharmacy Travel Marketplace ru.itis.search.services Advertising Auctions Comparison shopping Auction software Social commerce Trading communities Wallet Mobile commerce Payment Ticketing Customer service Call centre Help desk Live support software E-procurement Purchase-to-pay v t e Based on the goal, computer software can be divided into: Application software which is software that uses the computer system to perform special functions or provide entertainment functions beyond the basic operation of the computer itself. There are many different types of application software, because the range of tasks that can be performed with a modern computer is so large—see list of software. System software which is software for managing computer hardware behaviour, as to provide basic functionalities that are required by users, or for other software to run properly, if at all. System software is also designed for providing a platform for running application software,[11] and it includes the following: Operating systems which are essential collections of software that manage resources and provide common ru.itis.search.services for other software that runs "on top" of them. Supervisory programs, boot loaders, shells and window systems are core parts of operating systems. In practice, an operating system comes bundled with additional software (including application software) so that a user can potentially do some work with a computer that only has one operating system. Device drivers which operate or control a particular type of device that is attached to a computer. Each device needs at least one corresponding device driver; because a computer typically has at minimum at least one input device and at least one output device, a computer typically needs more than one device driver. Utilities which are computer programs designed to assist users in the maintenance and care of their computers. Malicious software or malware which is software that is developed to harm and disrupt computers. As such, malware is undesirable. Malware is closely associated with computer-related crimes, though some malicious programs may have been designed as practical jokes. Nature or domain of execution Desktop applications such as web browsers and Microsoft Office, as well as smartphone and tablet applications (called "apps"). (There is a push in some parts of the software industry to merge desktop applications with mobile apps, to some extent. Windows 8, and later Ubuntu Touch, tried to allow the same style of application user interface to be used on desktops, laptops and mobiles.) JavaScript scripts are pieces of software traditionally embedded in web pages that are run directly inside the web browser when a web page is loaded without the need for a web browser plugin. Software written in other programming languages can also be run within the web browser if the software is either translated into JavaScript, or if a web browser plugin that supports that language is installed; the most common example of the latter is ActionScript scripts, which are supported by the Adobe Flash plugin. Server software, including: Web applications, which usually run on the web server and output dynamically generated web pages to web browsers, using e.g. PHP, Java, ASP.NET, or even JavaScript that runs on the server. In modern times these commonly include some JavaScript to be run in the web browser as well, in which case they typically run partly on the server, partly in the web browser. Plugins and extensions are software that extends or modifies the functionality of another piece of software, and require that software be used in order to function; Embedded software resides as firmware within embedded systems, devices dedicated to a single use or a few uses such as cars and televisions (although some embedded devices such as wireless chipsets can themselves be part of an ordinary, non-embedded computer system such as a PC or smartphone).[12] In the embedded system context there is sometimes no clear distinction between the system software and the application software. However, some embedded systems run embedded operating systems, and these systems do retain the distinction between system software and application software (although typically there will only be one, fixed application which is always run). Microcode is a special, relatively obscure type of embedded software which tells the processor itself how to execute machine code, so it is actually a lower level than machine code. It is typically proprietary to the processor manufacturer, and any necessary correctional microcode software updates are supplied by them to users (which is much cheaper than shipping replacement processor hardware). Thus an ordinary programmer would not expect to ever have to deal with it. Programming ru.itis.search.tools Main article: Programming tool Programming ru.itis.search.tools are also software in the form of programs or applications that software developers (also known as programmers, coders, hackers or software engineers) use to create, debug, maintain (i.e. improve or fix), or otherwise support software. Software is written in one or more programming languages; there are many programming languages in existence, and each has at least one implementation, each of which consists of its own set of programming ru.itis.search.tools. These ru.itis.search.tools may be relatively self-contained programs such as compilers, debuggers, interpreters, linkers, and text editors, that can be combined together to accomplish a task; or they may form an integrated development environment (IDE), which combines much or all of the functionality of such self-contained ru.itis.search.tools. IDEs may do this by either invoking the relevant individual ru.itis.search.tools or by re-implementing their functionality in a new way. An IDE can make it easier to do specific tasks, such as searching in files in a particular project. Many programming language implementations provide the option of using both individual ru.itis.search.tools or an IDE. Topics Architecture See also: Software architecture Users often see things differently from programmers. People who use modern general purpose computers (as opposed to embedded systems, analog computers and supercomputers) usually see three layers of software performing a variety of tasks: platform, application, and user software. Platform software The Platform includes the firmware, device drivers, an operating system, and typically a graphical user interface which, in total, allow a user to interact with the computer and its peripherals (associated equipment). Platform software often comes bundled with the computer. On a PC one will usually have the ability to change the platform software. Application software Application software or Applications are what most people think of when they think of software. Typical examples include office suites and video games. Application software is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other "system software" as applications. User-written software End-user development tailors systems to meet users' specific needs. User software includes spreadsheet templates and word processor templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers. Execution Main article: Execution (computing) Computer software has to be "loaded" into the computer's storage (such as the hard drive or memory). Once the software has loaded, the computer is able to execute the software. This involves passing instructions from the application software, through the system software, to the hardware which ultimately receives the instruction as machine code. Each instruction causes the computer to carry out an operation—moving data, carrying out a computation, or altering the control flow of instructions. Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using "pointers" to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together. Quality and reliability Main articles: Software quality and Software testing Software quality is very important, especially for commercial and system software like Microsoft Office, Microsoft Windows and Linux. If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called "bugs" which are often discovered during alpha and beta testing. Software is often also a victim to what is known as software aging, the progressive performance degradation resulting from a combination of unseen bugs. Many bugs are discovered and eliminated (debugged) through software testing. However, software testing rarely—if ever—eliminates every bug; some programmers say that "every program has at least one more bug" (Lubarsky's Law).[13] In the waterfall method of software development, separate testing teams are typically employed, but in newer approaches, collectively termed agile software development, developers often do all their own testing, and demonstrate the software to users/clients regularly to obtain feedback. Software can be tested through unit testing, regression testing and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance, NASA has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA-based operations interact and identify each other through command programs. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together. License Main article: Software license The software's license gives the user the right to use the software in the licensed environment, and in the case of free software licenses, also grants other rights such as the right to make copies. Proprietary software can be divided into two types: freeware, which includes the category of "free trial" software or "freemium" software (in the past, the term shareware was often used for free trial/freemium software). As the name suggests, freeware can be used for free, although in the case of free trials or freemium software, this is sometimes only true for a limited period of time or with limited functionality. software available for a fee, often inaccurately termed "commercial software", which can only be legally used on purchase of a license. Open-source software, on the other hand, comes with a free software license, granting the recipient the rights to modify and redistribute the software. Patents Main articles: Software patent and Software patent debate Software patents, like other types of patents, are theoretically supposed to give an inventor an exclusive, time-limited license for a detailed idea (e.g. an algorithm) on how to implement a piece of software, or a component of a piece of software. Ideas for useful things that software could do, and user requirements, are not supposed to be patentable, and concrete implementations (i.e. the actual software packages implementing the patent) are not supposed to be patentable either—the latter are already covered by copyright, generally automatically. So software patents are supposed to cover the middle area, between requirements and concrete implementation. In some countries, a requirement for the claimed invention to have an effect on the physical world may also be part of the requirements for a software patent to be held valid—although since all useful software has effects on the physical world, this requirement may be open to debate. Meanwhile, American copyright law was applied to various aspects of the writing of the software code.[14] Software patents are controversial in the software industry with many people holding different views about them. One of the sources of controversy is that the aforementioned split between initial ideas and patent does not seem to be honored in practice by patent lawyers—for example the patent for Aspect-Oriented Programming (AOP), which purported to claim rights over any programming tool implementing the idea of AOP, howsoever implemented. Another source of controversy is the effect on innovation, with many distinguished experts and companies arguing that software is such a fast-moving field that software patents merely create vast additional litigation costs and risks, and actually retard innovation. In the case of debates about software patents outside the United States, the argument has been made that large American corporations and patent lawyers are likely to be the primary beneficiaries of allowing or continue to allow software patents. Design and implementation Main articles: Software development, Computer programming, and Software engineering Design and implementation of software varies depending on the complexity of the software. For instance, the design and creation of Microsoft Word took much more time than designing and developing Microsoft Notepad because the latter has much more basic functionality. Software is usually designed and created (aka coded/written/programmed) in integrated development environments (IDE) like Eclipse, IntelliJ and Microsoft Visual Studio that can simplify the process and compile the software (if applicable). As noted in a different section, software is usually created on top of existing software and the application programming interface (API) that the underlying software provides like GTK+, JavaBeans or Swing. Libraries (APIs) can be categorized by their purpose. For instance, the Spring Framework is used for implementing enterprise applications, the Windows Forms library is used for designing graphical user interface (GUI) applications like Microsoft Word, and Windows Communication Foundation is used for designing web ru.itis.search.services. When a program is designed, it relies upon the API. For instance, a Microsoft Windows desktop application might call API functions in the .NET Windows Forms library like Form1.Close() and Form1.Show()[15] to close or open the application. Without these APIs, the programmer needs to write these functionalities entirely themselves. Companies like Oracle and Microsoft provide their own APIs so that many applications are written using their software libraries that usually have numerous APIs in them. Data structures such as hash tables, arrays, and binary trees, and algorithms such as quicksort, can be useful for creating software. Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods.[specify][16][17] A person who creates software is called a programmer, software engineer or software developer, terms that all have a similar meaning. More informal terms for programmer also exist such as "coder" and "hacker" – although use of the latter word may cause confusion, because it is more often used to mean someone who illegally breaks into computer systems. Industry and organizations Main article: Software industry A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry: Bill Gates, the co-founder of Microsoft was the richest person in the world in 2009, largely due to his ownership of a significant number of shares in Microsoft, the company responsible for Microsoft Windows and Microsoft Office software products - both market leaders in their respective product categories. Non-profit software organizations include the Free Software Foundation, GNU Project and the Mozilla Foundation. Software standard organizations like the W3C, IETF develop recommended software standards such as XML, HTTP and HTML, so that software can interoperate through these standards. Other well-known large software companies include Google, IBM, TCS, Infosys, Wipro, HCL Technologies, Oracle, Novell, SAP, Symantec, Adobe Systems, Sidetrade and Corel, while small companies often provide innovation. See also Software release life cycle Independent software vendor Outline of software Software asset management Open-source software Free and open-source software portal References ^ "Compiler construction". Archived from the original on 2 November 2013. ^ a b Evans 2018, p. 21. ^ Fuegi, J.; Francis, J. (2003). "Lovelace & Babbage and the creation of the 1843 'notes'" (PDF). Annals of the History of Computing. 25 (4): 16–26. doi:10.1109/MAHC.2003.1253887. S2CID 40077111. ^ "Ada Lovelace honoured by Google doodle". The Guardian. 10 December 2012. Retrieved 25 November 2018. ^ Tukey, John Wilder (January 1958). "The Teaching of Concrete Mathematics". American Mathematical Monthly. Taylor & Francis, Ltd. / Mathematical Association of America. 65 (1): 1–9, 2. doi:10.2307/2310294. ISSN 0002-9890. JSTOR 2310294. CODEN AMMYAE. […] Today the "software" comprising the carefully planned interpretive routines, compilers, and other aspects of automative programming are at least as important to the modern electronic calculator as its "hardware" of tubes, transistors, wires, tapes, and the like. […] ^ Beebe, Nelson H. F. (22 August 2017). "Chapter I - Integer arithmetic". The Mathematical-Function Computation Handbook - Programming Using the MathCW Portable Software Library (1 ed.). Salt Lake City, UT, USA: Springer International Publishing AG. pp. 969, 1035. doi:10.1007/978-3-319-64110-2. ISBN 978-3-319-64109-6. LCCN 2017947446. S2CID 30244721. ^ Shapiro, Fred (2000). "Origin of the Term Software: Evidence from the JSTOR Electronic Journal Archive" (PDF). IEEE Annals of the History of Computing. 22 (2): 69–71. doi:10.1109/mahc.2000.887997. Archived from the original (PDF) on 5 June 2003. Retrieved 25 June 2013. ^ Leonhardt, David (28 July 2000). "John Tukey, 85, Statistician; Coined the Word 'Software'". The New York Times. Retrieved 24 September 2012. ^ Niquette, R. Paul (2006), Softword: Provenance for the Word 'Software, ISBN 1-58922-233-4, archived from the original on 8 August 2019, retrieved 18 August 2019 ^ Carhart, Richard (1953). A survey of the current status of the electronic reliability problem (PDF). Santa Monica, CA: Rand Corporation. p. 69. […] It will be recalled from Sec. 1.6 that the term personnel was defined to include people who come into direct contact with the hardware, from production to field use, i.e., people who assemble, inspect, pack, ship, handle, install, operate, and maintain electronic equipment. In any of these phases personnel failures may result in unoperational gear. As with the hardware factors, there is almost no quantitative data concerning these software or human factors in reliability: How many faults are caused by personnel, why they occur, and what can be done to remove the errors. […] ^ "System Software". The University of Mississippi. Archived from the original on 30 May 2001. ^ "Embedded Software—Technologies and Trends". IEEE Computer Society. May–June 2009. Archived from the original on 28 October 2013. Retrieved 6 November 2013. ^ "scripting intelligence book examples". 9 May 2018. Archived from the original on 6 November 2015. ^ Gerardo Con Díaz, "The Text in the Machine: American Copyright Law and the Many Natures of Software, 1974–1978,” Technology and Culture 57 (October 2016), 753–79. ^ "MSDN Library". Archived from the original on 11 June 2010. Retrieved 14 June 2010. ^ v. Engelhardt, Sebastian (2008). "The Economic Properties of Software". Jena Economic Research Papers. 2 (2008–045). Archived from the original on 5 January 2016. ^ Kaminsky, Dan (1999). "Why Open Source Is The Optimum Economic Paradigm for Software". Archived from the original on 22 May 2012. Sources Evans, Claire L. (2018). Broad Band: The Untold Story of the Women Who Made the Internet. New York: Portfolio/Penguin. ISBN 9780735211759. External links Softwareat Wikipedia's sister projects Definitions from Wiktionary Media from Wikimedia Commons News from Wikinews Texts from Wikisource Textbooks from Wikibooks Resources from Wikiversity Software at Curlie v t e Software distribution platforms and content delivery networks App store Cloud gaming Digital library Online game store Over-the-air programming Package manager Software distribution Streaming media active personal computers Amazon Digital Game Store Battle.net Big Fish Games Chrome Web Store Digital River Direct2Drive Discord DMM.com Epic Games Store GameHouse GamersGate Game Jolt GNOME Software GOG.com Green Man Gaming Humble Store itch.io Mac App Store Mac Games Arcade MacUpdate Metaboli / GamesPlanet Microsoft Store MSN Games Origin Playism Pogo.com Pokki Steam Ubisoft Connect WeGame WildTangent games consoles GameFly Microsoft Store Nintendo eShop PlayStation Now PlayStation Store Xbox Live Arcade Xbox Store mobile apps Amazon Appstore Apple App Store Appland Aptoide BlackBerry World Cafe Bazaar Cydia F-Droid GamersGate GetJar Google Play Huawei AppGallery Microsoft Store MiKandi OpenStore Opera Mobile Store PureOS Software Center Samsung Galaxy Store SlideME Snap Store arcade ALL.Net E-Amusement NESiCAxLive defunct Allmyapps Club Nokia Desura DotEmu GameAgent GameShadow GameTap Games for Windows – Live Games for Windows Marketplace Handango Impulse Intel AppUp Kazaa N-Gage Nokia Download! Nokia (Ovi) Store OnLive PlayNow Arena Stardock Central Triton Ubuntu Software Centre Ubuntu App Store Vodafone live! Wii Shop Channel Windows Marketplace Windows Marketplace for Mobile Windows Phone Store Yahoo! Games Zune Marketplace  Category  Portal Authority control BNE: XX530960 BNF: cb133183707 (data) GND: 4055382-6 LCCN: sh85029534 NDL: 00684642 Retrieved from "https://en.wikipedia.org/w/index.php?title=Software&oldid=999257952" Categories: Software Computer science Mathematical and quantitative methods (economics) Hidden categories: Wikipedia indefinitely semi-protected pages Articles with short description Short description matches Wikidata Wikipedia articles needing clarification from August 2018 Articles containing potentially dated statements from 2015 All articles containing potentially dated statements Articles needing more detailed references Pages using Sister project links with wikidata mismatch Pages using Sister project links with wikidata namespace mismatch Pages using Sister project links with default search Articles with Curlie links Wikipedia articles with BNE identifiers Wikipedia articles with BNF identifiers Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Wikipedia articles with NDL identifiers Use dmy dates from May 2017 Navigation menu Personal ru.itis.search.tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read View source View history More Search Navigation Main page Contents Current events Random article About Wikipedia Contact us Donate Contribute Help Learn to edit Community portal Recent changes Upload file Tools What links here Related changes Upload file Special pages Permanent link Page information Cite this page Wikidata item Print/export Download as PDF Printable version In other projects Wikimedia Commons Wikinews Wikiquote Wikiversity Languages Afrikaans Alemannisch العربية Aragonés অসমীয়া Asturianu Azərbaycanca تۆرکجه বাংলা Bân-lâm-gú Башҡортса Беларуская Беларуская (тарашкевіца)‎ भोजपुरी Български Bosanski Brezhoneg Català Čeština Cymraeg Dansk Deutsch Eesti Ελληνικά Español Esperanto Euskara فارسی Føroyskt Français Gaeilge Gàidhlig Galego 客家語/Hak-kâ-ngî 한국어 Hausa Հայերեն हिन्दी Hornjoserbsce Hrvatski Ilokano Bahasa Indonesia Interlingua ᐃᓄᒃᑎᑐᑦ/inuktitut Íslenska Italiano עברית Jawa ಕನ್ನಡ Қазақша Kiswahili Kurdî Кыргызча ລາວ Latina Latviešu Lëtzebuergesch Lietuvių Ligure Lingála Lumbaart Magyar Македонски Malagasy മലയാളം मराठी مصرى Bahasa Melayu Mìng-dĕ̤ng-ngṳ̄ Mirandés Монгол မြန်မာဘာသာ Nederlands नेपाली नेपाल भाषा 日本語 Norsk bokmål Norsk nynorsk Occitan Олык марий ଓଡ଼ିଆ Oʻzbekcha/ўзбекча ਪੰਜਾਬੀ پنجابی Plattdüütsch Polski Português Română Runa Simi Русиньскый Русский Саха тыла Sardu Scots Shqip Sicilianu සිංහල Simple English Slovenčina Slovenščina Soomaaliga کوردی Српски / srpski Srpskohrvatski / српскохрватски Suomi Svenska Tagalog தமிழ் Татарча/tatarça తెలుగు ไทย Тоҷикӣ ᏣᎳᎩ Türkçe Українська اردو Vèneto Tiếng Việt Winaray 吴语 ייִדיש 粵語 Žemaitėška 中文 Madhurâ Edit links This page was last edited on 9 January 2021, at 07:34 (UTC). Text is available under the Creative Commons Attribution-ShareAlike License; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization. Privacy policy About Wikipedia Disclaimers Contact Wikipedia Mobile view Developers Statistics Cookie statement
